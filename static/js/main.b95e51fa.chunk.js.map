{"version":3,"sources":["components/login.component.js","components/signup.component.js","App.js","serviceWorker.js","index.js"],"names":["Login","className","type","placeholder","id","htmlFor","href","Component","SignUp","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAEqBA,E,4JACjB,WACI,OACI,iCAEI,wCAEA,sBAAKC,UAAU,aAAf,UACI,0CACA,uBAAOC,KAAK,QAAQD,UAAU,eAAeE,YAAY,mBAG7D,sBAAKF,UAAU,aAAf,UACI,6CACA,uBAAOC,KAAK,WAAWD,UAAU,eAAeE,YAAY,sBAGhE,qBAAKF,UAAU,aAAf,SACI,sBAAKA,UAAU,iCAAf,UACI,uBAAOC,KAAK,WAAWD,UAAU,uBAAuBG,GAAG,iBAC3D,uBAAOH,UAAU,uBAAuBI,QAAQ,eAAhD,8BAIR,wBAAQH,KAAK,SAASD,UAAU,gCAAhC,qBACA,oBAAGA,UAAU,6BAAb,oBACW,mBAAGK,KAAK,IAAR,iC,GA1BQC,aCAdC,E,4JACjB,WACI,OACI,iCACI,0CAEA,sBAAKP,UAAU,aAAf,UACI,+CACA,uBAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,kBAG5D,sBAAKF,UAAU,aAAf,UACI,8CACA,uBAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,iBAG5D,sBAAKF,UAAU,aAAf,UACI,0CACA,uBAAOC,KAAK,QAAQD,UAAU,eAAeE,YAAY,mBAG7D,sBAAKF,UAAU,aAAf,UACI,6CACA,uBAAOC,KAAK,WAAWD,UAAU,eAAeE,YAAY,sBAGhE,wBAAQD,KAAK,SAASD,UAAU,gCAAhC,sBACA,oBAAGA,UAAU,6BAAb,gCACuB,mBAAGK,KAAK,IAAR,+B,GA5BHC,aCsCrBE,MAhCf,WACE,OAAQ,cAAC,IAAD,UACN,sBAAKR,UAAU,MAAf,UACE,qBAAKA,UAAU,iDAAf,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAeS,GAAI,WAAnC,yBACA,qBAAKT,UAAU,2BAA2BG,GAAG,sBAA7C,SACE,qBAAIH,UAAU,qBAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,WAAWS,GAAI,WAA/B,uBAEF,oBAAIT,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,WAAWS,GAAI,WAA/B,iCAOV,qBAAKT,UAAU,QAAf,SACE,qBAAKA,UAAU,QAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,cAAC,IAAD,CAAOY,KAAK,WAAWC,UAAWb,IAClC,cAAC,IAAD,CAAOY,KAAK,WAAWC,UAAWL,iBCpB1BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAQC,SAAU,6BAAlB,SAAgD,cAAC,EAAD,QAElDC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b95e51fa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Login extends Component {\n    render() {\n        return (\n            <form>\n\n                <h3>Log in</h3>\n\n                <div className=\"form-group\">\n                    <label>Email</label>\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <div className=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                        <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\n                    </div>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\">Sign in</button>\n                <p className=\"forgot-password text-right\">\n                    Forgot <a href=\"#\">password?</a>\n                </p>\n            </form>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class SignUp extends Component {\n    render() {\n        return (\n            <form>\n                <h3>Register</h3>\n\n                <div className=\"form-group\">\n                    <label>First name</label>\n                    <input type=\"text\" className=\"form-control\" placeholder=\"First name\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Last name</label>\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Last name\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Email</label>\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\">Register</button>\n                <p className=\"forgot-password text-right\">\n                    Already registered <a href=\"#\">log in?</a>\n                </p>\n            </form>\n        );\n    }\n}","import React from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Login from \"./components/login.component\";\nimport SignUp from \"./components/signup.component\";\n\nfunction App() {\n  return (<Router>\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n        <div className=\"container\">\n          <Link className=\"navbar-brand\" to={\"/sign-in\"}>RemoteStack</Link>\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/sign-in\"}>Sign in</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/sign-up\"}>Sign up</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"outer\">\n        <div className=\"inner\">\n          <Switch>\n            <Route exact path='/' component={Login} />\n            <Route path=\"/sign-in\" component={Login} />\n            <Route path=\"/sign-up\" component={SignUp} />\n          </Switch>\n        </div>\n      </div>\n    </div></Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport { Switch , Route , withRouter} from 'react-router-dom'\nimport {Link} from 'react-router-dom'\nimport { useHistory } from 'react-router-dom';\nimport {Redirect} from 'react-router'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={'/${process.env.PUBLIC_URL}'}><App /></Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n{/*<Route exact path=\"/\" render={() => (\n  loggedIn ? (\n    <Redirect to=\"/SignIn\"/>\n  ) : (\n    <PublicHomePage/>\n  )\n)}/>*/}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}